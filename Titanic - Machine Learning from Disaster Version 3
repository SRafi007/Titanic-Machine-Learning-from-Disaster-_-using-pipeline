{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn import set_config\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.feature_selection import mutual_info_classif\nfrom sklearn.base import BaseEstimator, TransformerMixin\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-26T16:47:40.188999Z","iopub.execute_input":"2024-05-26T16:47:40.189475Z","iopub.status.idle":"2024-05-26T16:47:40.196353Z","shell.execute_reply.started":"2024-05-26T16:47:40.189427Z","shell.execute_reply":"2024-05-26T16:47:40.195105Z"},"trusted":true},"execution_count":86,"outputs":[]},{"cell_type":"code","source":"train=pd.read_csv('/kaggle/input/titanic/train.csv')\ntest=pd.read_csv('/kaggle/input/titanic/test.csv')\nX=train.copy()\nY=test.copy()","metadata":{"execution":{"iopub.status.busy":"2024-05-26T16:47:40.199238Z","iopub.execute_input":"2024-05-26T16:47:40.199784Z","iopub.status.idle":"2024-05-26T16:47:40.217991Z","shell.execute_reply.started":"2024-05-26T16:47:40.199743Z","shell.execute_reply":"2024-05-26T16:47:40.216975Z"},"trusted":true},"execution_count":87,"outputs":[]},{"cell_type":"code","source":"X.info(), Y.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-26T16:47:40.219252Z","iopub.execute_input":"2024-05-26T16:47:40.219616Z","iopub.status.idle":"2024-05-26T16:47:40.243123Z","shell.execute_reply.started":"2024-05-26T16:47:40.219588Z","shell.execute_reply":"2024-05-26T16:47:40.241792Z"},"trusted":true},"execution_count":88,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 418 entries, 0 to 417\nData columns (total 11 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  418 non-null    int64  \n 1   Pclass       418 non-null    int64  \n 2   Name         418 non-null    object \n 3   Sex          418 non-null    object \n 4   Age          332 non-null    float64\n 5   SibSp        418 non-null    int64  \n 6   Parch        418 non-null    int64  \n 7   Ticket       418 non-null    object \n 8   Fare         417 non-null    float64\n 9   Cabin        91 non-null     object \n 10  Embarked     418 non-null    object \ndtypes: float64(2), int64(4), object(5)\nmemory usage: 36.0+ KB\n","output_type":"stream"},{"execution_count":88,"output_type":"execute_result","data":{"text/plain":"(None, None)"},"metadata":{}}]},{"cell_type":"code","source":"class Data_cleaning(BaseEstimator, TransformerMixin):\n    \n    def __init__(self):\n        pass\n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X):\n        # Fill missing Age values with median value\n        X['Age'].fillna(X['Age'].median(), inplace=True)\n        \n\n        # Fill missing Embarked values with mode\n        X['Embarked'].fillna(X['Embarked'].mode()[0], inplace=True)\n\n        # Fill missing Fare value in test set with median\n        X['Fare'].fillna(X['Fare'].median(), inplace=True)\n\n        # Create a new feature 'Has_Cabin' indicating whether a passenger has a Cabin\n        X['Has_Cabin'] = X['Cabin'].apply(lambda x: 0 if pd.isna(x) else 1)\n        \n        return X","metadata":{"execution":{"iopub.status.busy":"2024-05-26T16:47:40.244734Z","iopub.execute_input":"2024-05-26T16:47:40.245175Z","iopub.status.idle":"2024-05-26T16:47:40.255141Z","shell.execute_reply.started":"2024-05-26T16:47:40.245137Z","shell.execute_reply":"2024-05-26T16:47:40.253746Z"},"trusted":true},"execution_count":89,"outputs":[]},{"cell_type":"code","source":"class new_feature(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform (self, X):\n        # Create new feature FamilySize\n        X['FamilySize'] = X['SibSp'] + X['Parch'] + 1\n\n        # Create new feature IsAlone\n        X['IsAlone'] = X['FamilySize'].apply(lambda x: 1 if x == 1 else 0)\n\n        # Extract titles from names\n        X['Title'] = X['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\n\n        # Simplify titles\n        title_mapping = {\n            'Mr': 'Mr', 'Miss': 'Miss', 'Mrs': 'Mrs', 'Master': 'Master', 'Dr': 'Rare', 'Rev': 'Rare', 'Col': 'Rare', \n            'Major': 'Rare', 'Mlle': 'Miss', 'Countess': 'Royal', 'Ms': 'Miss', 'Lady': 'Royal', 'Jonkheer': 'Royal', \n            'Don': 'Royal', 'Mme': 'Mrs', 'Capt': 'Rare', 'Sir': 'Royal'\n        }\n        X['Title'] = X['Title'].map(title_mapping)\n\n        # Fare binning\n        X['FareBin'] = pd.qcut(X['Fare'], 4)\n\n        # Age binning\n        X['AgeBin'] = pd.cut(X['Age'].astype(int), 5)\n\n        # Convert categorical bins to numeric\n        from sklearn.preprocessing import LabelEncoder\n\n        label = LabelEncoder()\n        X['FareBin_Code'] = label.fit_transform(X['FareBin'])\n        X['AgeBin_Code'] = label.fit_transform(X['AgeBin'])\n\n        # Drop unnecessary columns\n        drop_columns = ['Cabin', 'Ticket', 'Name', 'FareBin', 'AgeBin']\n        X.drop(columns=drop_columns, inplace=True)\n        \n        return X","metadata":{"execution":{"iopub.status.busy":"2024-05-26T16:47:40.258828Z","iopub.execute_input":"2024-05-26T16:47:40.259179Z","iopub.status.idle":"2024-05-26T16:47:40.274149Z","shell.execute_reply.started":"2024-05-26T16:47:40.259151Z","shell.execute_reply":"2024-05-26T16:47:40.272780Z"},"trusted":true},"execution_count":90,"outputs":[]},{"cell_type":"code","source":"class data_encoding(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform (self, X):\n        X = pd.get_dummies(X, columns=['Sex', 'Embarked', 'Title'], drop_first=True)\n        return X","metadata":{"execution":{"iopub.status.busy":"2024-05-26T16:47:40.275263Z","iopub.execute_input":"2024-05-26T16:47:40.275705Z","iopub.status.idle":"2024-05-26T16:47:40.290017Z","shell.execute_reply.started":"2024-05-26T16:47:40.275673Z","shell.execute_reply":"2024-05-26T16:47:40.288776Z"},"trusted":true},"execution_count":91,"outputs":[]},{"cell_type":"code","source":"Cleaning_data=Data_cleaning()\nAdding_feature=new_feature()\nencoding_data=data_encoding()","metadata":{"execution":{"iopub.status.busy":"2024-05-26T16:47:40.291441Z","iopub.execute_input":"2024-05-26T16:47:40.291823Z","iopub.status.idle":"2024-05-26T16:47:40.303162Z","shell.execute_reply.started":"2024-05-26T16:47:40.291792Z","shell.execute_reply":"2024-05-26T16:47:40.302095Z"},"trusted":true},"execution_count":92,"outputs":[]},{"cell_type":"code","source":"pipe_for_testing=make_pipeline(Cleaning_data,Adding_feature,encoding_data) \nX=pipe_for_testing.fit_transform(X)\nX","metadata":{"execution":{"iopub.status.busy":"2024-05-26T16:47:40.304825Z","iopub.execute_input":"2024-05-26T16:47:40.305175Z","iopub.status.idle":"2024-05-26T16:47:40.364836Z","shell.execute_reply.started":"2024-05-26T16:47:40.305147Z","shell.execute_reply":"2024-05-26T16:47:40.363608Z"},"trusted":true},"execution_count":93,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/2030874772.py:10: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  X['Age'].fillna(X['Age'].median(), inplace=True)\n/tmp/ipykernel_33/2030874772.py:14: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  X['Embarked'].fillna(X['Embarked'].mode()[0], inplace=True)\n/tmp/ipykernel_33/2030874772.py:17: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  X['Fare'].fillna(X['Fare'].median(), inplace=True)\n","output_type":"stream"},{"execution_count":93,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived  Pclass   Age  SibSp  Parch     Fare  Has_Cabin  \\\n0              1         0       3  22.0      1      0   7.2500          0   \n1              2         1       1  38.0      1      0  71.2833          1   \n2              3         1       3  26.0      0      0   7.9250          0   \n3              4         1       1  35.0      1      0  53.1000          1   \n4              5         0       3  35.0      0      0   8.0500          0   \n..           ...       ...     ...   ...    ...    ...      ...        ...   \n886          887         0       2  27.0      0      0  13.0000          0   \n887          888         1       1  19.0      0      0  30.0000          1   \n888          889         0       3  28.0      1      2  23.4500          0   \n889          890         1       1  26.0      0      0  30.0000          1   \n890          891         0       3  32.0      0      0   7.7500          0   \n\n     FamilySize  IsAlone  FareBin_Code  AgeBin_Code  Sex_male  Embarked_Q  \\\n0             2        0             0            1      True       False   \n1             2        0             3            2     False       False   \n2             1        1             1            1     False       False   \n3             2        0             3            2     False       False   \n4             1        1             1            2      True       False   \n..          ...      ...           ...          ...       ...         ...   \n886           1        1             1            1      True       False   \n887           1        1             2            1     False       False   \n888           4        0             2            1     False       False   \n889           1        1             2            1      True       False   \n890           1        1             0            1      True        True   \n\n     Embarked_S  Title_Miss  Title_Mr  Title_Mrs  Title_Rare  Title_Royal  \n0          True       False      True      False       False        False  \n1         False       False     False       True       False        False  \n2          True        True     False      False       False        False  \n3          True       False     False       True       False        False  \n4          True       False      True      False       False        False  \n..          ...         ...       ...        ...         ...          ...  \n886        True       False     False      False        True        False  \n887        True        True     False      False       False        False  \n888        True        True     False      False       False        False  \n889       False       False      True      False       False        False  \n890       False       False      True      False       False        False  \n\n[891 rows x 20 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Has_Cabin</th>\n      <th>FamilySize</th>\n      <th>IsAlone</th>\n      <th>FareBin_Code</th>\n      <th>AgeBin_Code</th>\n      <th>Sex_male</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n      <th>Title_Miss</th>\n      <th>Title_Mr</th>\n      <th>Title_Mrs</th>\n      <th>Title_Rare</th>\n      <th>Title_Royal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>887</td>\n      <td>0</td>\n      <td>2</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>888</td>\n      <td>1</td>\n      <td>1</td>\n      <td>19.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>889</td>\n      <td>0</td>\n      <td>3</td>\n      <td>28.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>890</td>\n      <td>1</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>891</td>\n      <td>0</td>\n      <td>3</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 20 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"bool_columns = ['Sex_male', 'Embarked_Q', 'Embarked_S', 'Title_Miss', 'Title_Mr', 'Title_Mrs', 'Title_Rare', 'Title_Royal']\nfor col in bool_columns:\n    if col in X.columns:\n        X[col] = X[col].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-05-26T16:47:40.366285Z","iopub.execute_input":"2024-05-26T16:47:40.366725Z","iopub.status.idle":"2024-05-26T16:47:40.379799Z","shell.execute_reply.started":"2024-05-26T16:47:40.366676Z","shell.execute_reply":"2024-05-26T16:47:40.378664Z"},"trusted":true},"execution_count":94,"outputs":[]},{"cell_type":"code","source":"X","metadata":{"execution":{"iopub.status.busy":"2024-05-26T16:47:40.381464Z","iopub.execute_input":"2024-05-26T16:47:40.382419Z","iopub.status.idle":"2024-05-26T16:47:40.413996Z","shell.execute_reply.started":"2024-05-26T16:47:40.382377Z","shell.execute_reply":"2024-05-26T16:47:40.412733Z"},"trusted":true},"execution_count":95,"outputs":[{"execution_count":95,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived  Pclass   Age  SibSp  Parch     Fare  Has_Cabin  \\\n0              1         0       3  22.0      1      0   7.2500          0   \n1              2         1       1  38.0      1      0  71.2833          1   \n2              3         1       3  26.0      0      0   7.9250          0   \n3              4         1       1  35.0      1      0  53.1000          1   \n4              5         0       3  35.0      0      0   8.0500          0   \n..           ...       ...     ...   ...    ...    ...      ...        ...   \n886          887         0       2  27.0      0      0  13.0000          0   \n887          888         1       1  19.0      0      0  30.0000          1   \n888          889         0       3  28.0      1      2  23.4500          0   \n889          890         1       1  26.0      0      0  30.0000          1   \n890          891         0       3  32.0      0      0   7.7500          0   \n\n     FamilySize  IsAlone  FareBin_Code  AgeBin_Code  Sex_male  Embarked_Q  \\\n0             2        0             0            1         1           0   \n1             2        0             3            2         0           0   \n2             1        1             1            1         0           0   \n3             2        0             3            2         0           0   \n4             1        1             1            2         1           0   \n..          ...      ...           ...          ...       ...         ...   \n886           1        1             1            1         1           0   \n887           1        1             2            1         0           0   \n888           4        0             2            1         0           0   \n889           1        1             2            1         1           0   \n890           1        1             0            1         1           1   \n\n     Embarked_S  Title_Miss  Title_Mr  Title_Mrs  Title_Rare  Title_Royal  \n0             1           0         1          0           0            0  \n1             0           0         0          1           0            0  \n2             1           1         0          0           0            0  \n3             1           0         0          1           0            0  \n4             1           0         1          0           0            0  \n..          ...         ...       ...        ...         ...          ...  \n886           1           0         0          0           1            0  \n887           1           1         0          0           0            0  \n888           1           1         0          0           0            0  \n889           0           0         1          0           0            0  \n890           0           0         1          0           0            0  \n\n[891 rows x 20 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Has_Cabin</th>\n      <th>FamilySize</th>\n      <th>IsAlone</th>\n      <th>FareBin_Code</th>\n      <th>AgeBin_Code</th>\n      <th>Sex_male</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n      <th>Title_Miss</th>\n      <th>Title_Mr</th>\n      <th>Title_Mrs</th>\n      <th>Title_Rare</th>\n      <th>Title_Royal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>887</td>\n      <td>0</td>\n      <td>2</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>888</td>\n      <td>1</td>\n      <td>1</td>\n      <td>19.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>889</td>\n      <td>0</td>\n      <td>3</td>\n      <td>28.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>890</td>\n      <td>1</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>891</td>\n      <td>0</td>\n      <td>3</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 20 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"mi_y = X['Survived']\nmi_X = X.drop(columns=['Survived'])\nmi_score = mutual_info_classif(mi_X , mi_y)\n\nfetures = []\nfor col, score in zip(X.columns , mi_score):\n    print(col, \":\", score)\n    if(score>0):\n        fetures.append(col)","metadata":{"execution":{"iopub.status.busy":"2024-05-26T16:47:40.415667Z","iopub.execute_input":"2024-05-26T16:47:40.416103Z","iopub.status.idle":"2024-05-26T16:47:40.524952Z","shell.execute_reply.started":"2024-05-26T16:47:40.416064Z","shell.execute_reply":"2024-05-26T16:47:40.523689Z"},"trusted":true},"execution_count":96,"outputs":[{"name":"stdout","text":"PassengerId : 0.01961398806568604\nSurvived : 0.033038867383798465\nPclass : 0.031806362920286935\nAge : 0.03728284641433954\nSibSp : 0.002435983063134417\nParch : 0.13440507515501499\nFare : 0.04859278579361992\nHas_Cabin : 0.04799885782130375\nFamilySize : 0.012168013858836702\nIsAlone : 0.06045234632240204\nFareBin_Code : 0.0076168375532263966\nAgeBin_Code : 0.1182995725798568\nSex_male : 0.00526200075004124\nEmbarked_Q : 0.023441947522241824\nEmbarked_S : 0.044103578038054536\nTitle_Miss : 0.16569842105591004\nTitle_Mr : 0.07391462112906821\nTitle_Mrs : 0.0\nTitle_Rare : 0.03374883589714894\n","output_type":"stream"}]},{"cell_type":"markdown","source":"def plot_data(x_data, y_data):\n    plt.figure(figsize=(10, 6))\n    sns.boxplot(data=X, x=x_data, y='Survived', hue= y_data)\n    plt.title('Fare Distribution by Pclass and Survival Status')\n    plt.xlabel(x_data)\n    plt.ylabel(y_data)\n    plt.legend(title='Survived')\n    plt.show()\n\n    # Swarm plot for Pclass and Fare, with hue as Survived\n    plt.figure(figsize=(10, 6))\n    sns.swarmplot(data=X, x=x_data, y=y_data, hue='Survived', dodge=True)\n    plt.title('Fare Distribution by Pclass and Survival Status')\n    plt.xlabel(x_data)\n    plt.ylabel(y_data)\n    plt.legend(title='Survived')\n    plt.show()\n\n    # Violin plot for Pclass and Fare, with hue as Survived\n    plt.figure(figsize=(10, 6))\n    sns.violinplot(data=X, x=x_data, y=y_data, hue='Survived', split=True)\n    plt.title('Fare Distribution by Pclass and Survival Status')\n    plt.xlabel(x_data)\n    plt.ylabel(y_data)\n    plt.legend(title='Survived')\n    plt.show()\n    \nplot_data( 'Pclass', 'FamilySize')","metadata":{"execution":{"iopub.status.busy":"2024-05-26T16:40:19.402857Z","iopub.execute_input":"2024-05-26T16:40:19.403314Z","iopub.status.idle":"2024-05-26T16:40:19.414917Z","shell.execute_reply.started":"2024-05-26T16:40:19.403279Z","shell.execute_reply":"2024-05-26T16:40:19.413643Z"}}},{"cell_type":"code","source":"fetures","metadata":{"execution":{"iopub.status.busy":"2024-05-26T16:47:40.526460Z","iopub.execute_input":"2024-05-26T16:47:40.526860Z","iopub.status.idle":"2024-05-26T16:47:40.534170Z","shell.execute_reply.started":"2024-05-26T16:47:40.526830Z","shell.execute_reply":"2024-05-26T16:47:40.533101Z"},"trusted":true},"execution_count":97,"outputs":[{"execution_count":97,"output_type":"execute_result","data":{"text/plain":"['PassengerId',\n 'Survived',\n 'Pclass',\n 'Age',\n 'SibSp',\n 'Parch',\n 'Fare',\n 'Has_Cabin',\n 'FamilySize',\n 'IsAlone',\n 'FareBin_Code',\n 'AgeBin_Code',\n 'Sex_male',\n 'Embarked_Q',\n 'Embarked_S',\n 'Title_Miss',\n 'Title_Mr',\n 'Title_Rare']"},"metadata":{}}]},{"cell_type":"code","source":"corr_matrix=X[fetures].corr()\nplt.figure(figsize=(12, 10))\nsns.heatmap(corr_matrix, annot=True, cmap='coolwarm', linewidths=0.5)\nplt.title('Correlation Heatmap including Categorical Features')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-26T16:47:57.962835Z","iopub.execute_input":"2024-05-26T16:47:57.963923Z"},"trusted":true},"execution_count":null,"outputs":[]}]}